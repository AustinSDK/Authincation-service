<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User settings</title>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/settings.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
        /* Email Verification Banner Styles */
        .verification-banner {
            background: linear-gradient(135deg, var(--bg-alt2) 0%, var(--bg-alt) 100%);
            border: 1px solid var(--accent);
            border-left: 4px solid var(--accent);
            border-radius: var(--radius);
            padding: 1.25rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
            animation: slideDown 0.3s ease-out;
        }

        .verification-banner-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
        }

        .verification-banner-header .icon {
            font-size: 1.5rem;
            color: var(--accent);
        }

        .verification-banner-header h3 {
            margin: 0;
            font-size: 1.1rem;
            color: var(--text);
            font-weight: 600;
        }

        .verification-banner p {
            margin: 0.5rem 0;
            color: var(--text-dim);
            font-size: 0.9rem;
            line-height: 1.5;
        }

        .verification-banner .email-display {
            background: var(--bg);
            padding: 0.5rem 0.75rem;
            border-radius: var(--radius-sm);
            margin: 0.75rem 0;
            font-family: monospace;
            word-break: break-all;
            color: var(--accent);
            border: 1px solid #262626;
            font-size: 0.9rem;
        }

        .verification-input-group {
            display: flex;
            gap: 0.75rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .verification-input-group input {
            flex: 1;
            min-width: 200px;
            padding: 0.75rem;
            font-size: 1.1rem;
            letter-spacing: 0.3rem;
            text-align: center;
            background: var(--bg);
            border: 1px solid #262626;
            border-radius: var(--radius-sm);
            color: var(--text);
            font-family: monospace;
            transition: border-color 0.3s;
        }

        .verification-input-group input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: var(--focus);
        }

        .verification-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn-verify {
            padding: 0.75rem 1.25rem;
        }

        @keyframes slideDown {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        /* Disabled field styling */
        .form-default input:disabled,
        .form-default input[readonly] {
            opacity: 0.6;
            cursor: not-allowed;
            background: var(--bg);
            border-color: #1a1a1a;
        }

        .field-locked {
            position: relative;
        }

        .field-locked::after {
            content: 'ðŸ”’';
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            font-size: 1rem;
            opacity: 0.5;
            pointer-events: none;
        }
    </style>
    <script>
        // Toast notification utility function - defined early for use in logout
        function toToast(msg, isSuccess = false) {
            Toastify({ 
                text: msg, 
                duration: 3000, 
                gravity: 'top', 
                position: 'right', 
                style: { 
                    background: isSuccess ? 'rgb(56,142,60)' : 'rgb(212,56,56)', 
                    color: '#fff' 
                } 
            }).showToast();
        }
        
        logout = async (id) => {
            try {
                const response = await fetch('/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ tokenId: id })
                });

                const result = await response.json();
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    toToast('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Logout error:', error);
                toToast('An error occurred while logging out');
            }
        }
    </script>
</head>
<body>
    <%- include('partials/nav', { user: user }) %>
    <main class="container">
        <% if (user.admin) { %>
            <% if ("admin" in query) { %>
                <a href="?">Regular view</a>
            <% } else { %>
                <a href="?admin">Admin view</a>
            <% } %>
        <% } %>
        <header>
            <h1><%= _user.display_name %><% if (_user.display_name !== _user.username) {%>&lt;<%= _user.username %>&gt;<% } %></h1>
            <p style="margin-top:.25rem;" class="muted">A super cool user account, lol, uh, mhm</p>
        </header>
        <% if (user.admin && "admin" in query) { %>
            <%- include('partials/admin', { user: user }) %>
        <% } %>
        <%- include('partials/settings', { user: user }) %>
        <h2>logged in tokens</h2>
        <div class="admin-section">
        <% tokens.forEach(token => { %>
            <p class="token">
                <% if (token.token === user.token) { %>
                    <span class="info" title="current-device">CD</span>
                <% } %>
                <span class="id info" title="id">[<%= token.id %>]</span>
                <span class="timestamp info" title="time-stamp">[<%= String(token.time_stamp).split(" ")[0] %>]</span>
                - <a href="#" onclick="logout(<%= token.id %>)">Logout session</a>
            </p>
        <% }) %>
        </div>
    </main>

    <% if (user.admin && "admin" in query) { %>
    <script>
        /**
         *  User Actions
         *  
         */
        
        let _del = false;
        let _resetpw = false;
        async function deleteAccount(){
            if (_del) return;
            
            // Confirm deletion
            if (!confirm("Are you sure you want to delete this account? This action cannot be undone!")) {
                return;
            }
            
            _del = true;
            
            try {
                let _fetch = await fetch("/deleteAccount", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userid: <%- JSON.stringify(id) %>
                    })
                });
                
                let _data = await _fetch.json();
                
                if (_fetch.ok) {
                    toToast("Account deleted successfully", true);
                    setTimeout(() => {
                        window.location.href = "/users"; // Redirect to users list
                    }, 1000);
                } else {
                    toToast("Error: " + _data.message);
                }
            } catch (error) {
                console.error('Delete account error:', error);
                toToast("An error occurred while deleting the account");
            } finally {
                _del = false;
            }
        }
        
        async function resetPassword(){
            if (_resetpw) return;
            
            let password = prompt("What's the new password?");
            if (!password || password.trim() === "") {
                return;
            }
            
            _resetpw = true;
            
            try {
                let _fetch = await fetch("/resetPassword", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userid: <%- JSON.stringify(id) %>,
                        password: password
                    })
                });
                
                let _data = await _fetch.json();
                
                if (_fetch.ok) {
                    toToast("Password reset successfully", true);
                } else {
                    toToast("Error: " + _data.message);
                }
            } catch (error) {
                console.error('Reset password error:', error);
                toToast("An error occurred while resetting the password");
            } finally {
                _resetpw = false;
            }
        }


        /**
         * User Permissions Management JavaScript
         * Handles permission management for current user
         */

        // DOM elements for permissions management
        const userPermInput = document.getElementById('userPermInput');
        const userPermChips = document.getElementById('userPermChips');
        const clearUserPermsBtn = document.getElementById('clearUserPerms');
        const saveUserPermsBtn = document.getElementById('saveUserPerms');
        const resetUserPermsBtn = document.getElementById('resetUserPerms');

        /**
         * Permission Management Functions
         */

        // Get all current user permissions as an array
        function getUserPerms() {
            return Array.from(userPermChips.querySelectorAll('.chip')).map(c => c.dataset.value);
        }

        // Add a new user permission chip
        function addUserPerm(raw) {
            const v = (raw || '').trim().toLowerCase();
            if (!v) return; 
            
            if (getUserPerms().includes(v)) {
                toToast('Permission already exists');
                return;
            }
            
            // Create permission chip element
            const chip = document.createElement('button');
            chip.type = 'button';
            chip.className = 'chip';
            chip.dataset.value = v;
            chip.innerHTML = `<span>${v}</span><span class="x" aria-label="Remove">Ã—</span>`;
            
            // Add click handler to remove chip
            chip.addEventListener('click', () => {
                chip.remove();
                updateUserPermissionsDisplay();
            });
            
            userPermChips.appendChild(chip);
            updateUserPermissionsDisplay();
        }

        // Update accessibility attributes for screen readers
        function updateUserPermissionsDisplay() {
            const perms = getUserPerms();
            if (perms.length === 0) {
                userPermChips.setAttribute('aria-label', 'No user permissions added');
            } else {
                userPermChips.setAttribute('aria-label', `${perms.length} user permission${perms.length === 1 ? '' : 's'}: ${perms.join(', ')}`);
            }
        }

        // Initialize with current user permissions
        function initializeUserPermissions() {
            <% if (user.admin && "admin" in query) { %>
                // Load the viewed user's permissions when in admin view
                const currentUserPermissions = <%- JSON.stringify(_user.permissions || []) %>;
            <% } else { %>
                // Load current user permissions from the template data
                const currentUserPermissions = <%- JSON.stringify(user.permissions || []) %>;
            <% } %>
            userPermChips.innerHTML = '';
            currentUserPermissions.forEach(perm => addUserPerm(perm));
        }

        // Process input for comma-separated permissions
        function processUserPermissionInput() {
            const inputValue = userPermInput.value.trim();
            if (!inputValue) return;
            
            // Split by commas and process each permission
            const permissions = inputValue.split(',').map(p => p.trim()).filter(p => p.length > 0);
            
            permissions.forEach(perm => {
                if (perm) {
                    addUserPerm(perm);
                }
            });
            
            userPermInput.value = ''; // Clear the input after processing
        }

        /**
         * Event Listeners
         */
        if (userPermInput && userPermChips) {
            // Initialize permissions on page load
            document.addEventListener('DOMContentLoaded', () => {
                initializeUserPermissions();
            });

            // Add permission when Enter key is pressed OR comma is typed
            userPermInput.addEventListener('keydown', e => { 
                if (e.key === 'Enter' || e.key === ',') { 
                    e.preventDefault(); 
                    processUserPermissionInput();
                }
            });

            // Add permission when user clicks away from input
            userPermInput.addEventListener('blur', () => {
                if (userPermInput.value.trim()) {
                    processUserPermissionInput();
                }
            });

            // Clear all permissions
            clearUserPermsBtn.addEventListener('click', () => { 
                userPermChips.innerHTML = ''; 
                updateUserPermissionsDisplay();
            });

            // Save permissions
            saveUserPermsBtn.addEventListener('click', async () => {
                const permissions = getUserPerms();
                
                // Prepare request body
                const requestBody = { permissions };
                
                <% if (user.admin && "admin" in query) { %>
                    // When in admin view, include the target user's ID
                    requestBody.userId = <%- JSON.stringify(id) %>;
                <% } %>
                
                // Disable button during save
                saveUserPermsBtn.disabled = true;
                saveUserPermsBtn.textContent = 'Saving...';
                
                try {
                    const response = await fetch('/user/permissions', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody)
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        toToast('Error: ' + result.message);
                    }
                } catch (error) {
                    toToast('Error saving permissions: ' + error.message);
                } finally {
                    // Re-enable button
                    saveUserPermsBtn.disabled = false;
                    saveUserPermsBtn.textContent = 'Save Permissions';
                }
            });

            // Reset permissions
            resetUserPermsBtn.addEventListener('click', async () => {
                if (confirm('Are you sure you want to clear all permissions?')) {
                    userPermChips.innerHTML = '';
                    updateUserPermissionsDisplay();

                    // Prepare request body
                    const requestBody = { permissions: [] };
                    
                    <% if (user.admin && "admin" in query) { %>
                        // When in admin view, include the target user's ID
                        requestBody.userId = <%- JSON.stringify(id) %>;
                    <% } %>

                    // Disable button during reset
                    resetUserPermsBtn.disabled = true;
                    resetUserPermsBtn.textContent = 'Resetting...';

                    try {
                        const response = await fetch('/user/permissions', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(requestBody)
                        });
                        const result = await response.json();
                        if (response.ok) {
                            toToast('All user permissions have been cleared and saved.');
                        } else {
                            toToast('Error: ' + result.message);
                        }
                    } catch (error) {
                        toToast('Error resetting permissions: ' + error.message);
                    } finally {
                        resetUserPermsBtn.disabled = false;
                        resetUserPermsBtn.textContent = 'Reset Permissions';
                    }
                }
            });
        }
    </script>
    <% } %>
    
    <script>
        /**
         * Personal Information Form Handler
         * Handles updating user's email and display name
         */
        const userInfoForm = document.getElementById('user_info');
        
        if (userInfoForm) {
            const originalEmail = '<%= _user.email %>';
            const originalDisplayName = '<%= _user.display_name %>';
            
            // Handle form submission
            userInfoForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const formData = new FormData(userInfoForm);
                const email = formData.get('email');
                const displayName = formData.get('display_name');
                
                // Validate display name if provided and not empty
                if (displayName && displayName.trim()) {
                    const trimmedDisplayName = displayName.trim();
                    
                    if (trimmedDisplayName.length < 2) {
                        toToast('Display name must be at least 2 characters long');
                        return;
                    }
                    if (trimmedDisplayName.length > 50) {
                        toToast('Display name must be at most 50 characters long');
                        return;
                    }
                    
                    // Validate display name characters (only letters, numbers, and spaces)
                    const displayNameRegex = /^[a-zA-Z0-9 ]+$/;
                    if (!displayNameRegex.test(trimmedDisplayName)) {
                        toToast('Display name can only contain letters, numbers, and spaces');
                        return;
                    }
                }
                
                // Validate email if provided and not empty
                if (email && email.trim()) {
                    const trimmedEmail = email.trim();
                    
                    const emailRegex = /^[a-zA-Z0-9._+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                    if (!emailRegex.test(trimmedEmail)) {
                        toToast('Please enter a valid email address');
                        return;
                    }
                    
                    if (trimmedEmail.length > 254) {
                        toToast('Email address is too long (max 254 characters)');
                        return;
                    }
                }
                
                const saveBtn = document.getElementById('saveUserInfo');
                saveBtn.disabled = true;
                saveBtn.textContent = 'Saving...';
                
                try {
                    const response = await fetch('/user/update-info', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            email: email,
                            display_name: displayName
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        if (result.emailChanged && result.requiresVerification) {
                            toToast('Personal information updated! Please verify your email.', true);
                        } else {
                            toToast('Personal information updated successfully', true);
                        }
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        toToast('Error: ' + result.message);
                    }
                } catch (error) {
                    console.error('Update error:', error);
                    toToast('An error occurred while updating personal information');
                } finally {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Save Changes';
                }
            });
            
            // Handle reset button
            const resetBtn = document.getElementById('resetUserInfo');
            if (resetBtn) {
                resetBtn.addEventListener('click', () => {
                    document.getElementById('email').value = originalEmail;
                    document.getElementById('display_name').value = originalDisplayName;
                    toToast('Form reset to original values', true);
                });
            }
        }
    </script>
    
    <script>
        /**
         * Email Verification Functions
         */
        
        async function verifyEmail() {
            const codeInput = document.getElementById('verificationCode');
            const verifyBtn = document.getElementById('verifyBtn');
            
            if (!codeInput || !verifyBtn) return;
            
            const code = codeInput.value.trim();
            
            if (!code || code.length !== 6) {
                toToast('Please enter a valid 6-digit code');
                return;
            }
            
            // Validate that code contains only numbers
            if (!/^\d{6}$/.test(code)) {
                toToast('Code must contain only numbers');
                return;
            }
            
            verifyBtn.disabled = true;
            verifyBtn.textContent = 'Verifying...';
            
            try {
                const response = await fetch('/user/verify-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ code })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    toToast('Email verified successfully! ðŸŽ‰', true);
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    toToast('Error: ' + result.message);
                    verifyBtn.disabled = false;
                    verifyBtn.textContent = 'Verify Email';
                }
            } catch (error) {
                console.error('Verification error:', error);
                toToast('An error occurred while verifying email');
                verifyBtn.disabled = false;
                verifyBtn.textContent = 'Verify Email';
            }
        }
        
        async function sendVerificationEmail() {
            const sendBtn = document.getElementById('sendVerifyBtn');
            
            if (!sendBtn) return;
            
            sendBtn.disabled = true;
            sendBtn.textContent = 'Sending...';
            
            try {
                const response = await fetch('/user/resend-verification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    toToast('Verification code sent! Check your email.', true);
                    sendBtn.textContent = 'Code Sent âœ“';
                    // Focus on verification input
                    const codeInput = document.getElementById('verificationCode');
                    if (codeInput) {
                        codeInput.focus();
                    }
                } else {
                    toToast('Error: ' + result.message);
                    sendBtn.disabled = false;
                    sendBtn.textContent = 'Send Verification Email';
                }
            } catch (error) {
                console.error('Send verification error:', error);
                toToast('An error occurred while sending verification code');
                sendBtn.disabled = false;
                sendBtn.textContent = 'Send Verification Email';
            } finally {
                // Re-enable after 60 seconds to prevent spam
                setTimeout(() => {
                    if (sendBtn.textContent === 'Code Sent âœ“') {
                        sendBtn.disabled = false;
                        sendBtn.textContent = 'Resend Code';
                    }
                }, 60000);
            }
        }

        /**
         * TOTP Functions
         */
        
        // Load TOTP status on page load
        async function loadTOTPStatus() {
            const toggleCheckbox = document.getElementById('totpToggle');
            const statusSpan = document.getElementById('totpStatus');
            const actionsDiv = document.getElementById('totpActions');
            const qrImage = document.getElementById('totpQrCode');
            
            if (!toggleCheckbox || !statusSpan) return;
            
            try {
                const response = await fetch('/user/totp-status');
                const result = await response.json();
                
                if (response.ok) {
                    toggleCheckbox.checked = result.active;
                    statusSpan.textContent = result.active ? 'Enabled' : 'Disabled';
                    statusSpan.style.color = result.active ? 'var(--accent, green)' : 'var(--muted)';
                    
                    // Show actions section if TOTP exists or is active
                    if (result.hasTotp) {
                        actionsDiv.style.display = 'block';
                        
                        // If active and has QR code, display it
                        if (result.active && result.qrCode && qrImage) {
                            qrImage.src = result.qrCode;
                            qrImage.style.display = 'block';
                            qrImage.alt = 'TOTP QR Code - Scan with Google Authenticator';
                        }
                    }
                } else {
                    statusSpan.textContent = 'Error loading status';
                    console.error('Error loading TOTP status:', result);
                }
            } catch (error) {
                console.error('TOTP status error:', error);
                statusSpan.textContent = 'Error';
            }
        }
        
        // Toggle TOTP on/off
        async function toggleTOTP(active) {
            const toggleCheckbox = document.getElementById('totpToggle');
            const statusSpan = document.getElementById('totpStatus');
            const actionsDiv = document.getElementById('totpActions');
            const qrImage = document.getElementById('totpQrCode');
            
            if (!toggleCheckbox || !statusSpan) return;
            
            // If trying to enable, first check if secret exists, if not generate one
            if (active) {
                try {
                    const statusResponse = await fetch('/user/totp-status');
                    const statusResult = await statusResponse.json();
                    
                    if (!statusResult.hasTotp) {
                        // No secret exists, generate one first
                        toggleCheckbox.disabled = true;
                        statusSpan.textContent = 'Generating secret...';
                        
                        const generateResponse = await fetch('/user/generate-totp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const generateResult = await generateResponse.json();
                        
                        if (generateResponse.ok) {
                            // Display the QR code
                            actionsDiv.style.display = 'block';
                            qrImage.src = generateResult.qrCode;
                            qrImage.style.display = 'block';
                            qrImage.alt = 'TOTP QR Code - Scan with Google Authenticator';
                            
                            toToast('TOTP secret generated! Scan the QR code, then toggle will enable automatically.', true);
                            
                            // Now proceed to enable
                        } else {
                            toggleCheckbox.checked = false;
                            statusSpan.textContent = 'Disabled';
                            toggleCheckbox.disabled = false;
                            toToast('Error generating secret: ' + generateResult.message);
                            return;
                        }
                    }
                } catch (error) {
                    console.error('Error checking TOTP status:', error);
                    toggleCheckbox.checked = false;
                    toggleCheckbox.disabled = false;
                    statusSpan.textContent = 'Error';
                    toToast('An error occurred');
                    return;
                }
            }
            
            // Disable toggle while processing
            toggleCheckbox.disabled = true;
            statusSpan.textContent = 'Updating...';
            
            try {
                const response = await fetch('/user/toggle-totp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ active })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    statusSpan.textContent = active ? 'Enabled' : 'Disabled';
                    statusSpan.style.color = active ? 'var(--accent, green)' : 'var(--muted)';
                    
                    if (active) {
                        actionsDiv.style.display = 'block';
                        toToast('TOTP authentication enabled! Make sure to test it before logging out.', true);
                        
                        // If enabling, reload to get QR code
                        loadTOTPStatus();
                    } else {
                        if (qrImage) {
                            qrImage.style.display = 'none';
                        }
                        toToast('TOTP authentication disabled', true);
                    }
                } else {
                    // Revert checkbox state on error
                    toggleCheckbox.checked = !active;
                    statusSpan.textContent = !active ? 'Enabled' : 'Disabled';
                    toToast('Error: ' + result.message);
                }
            } catch (error) {
                console.error('TOTP toggle error:', error);
                toggleCheckbox.checked = !active;
                statusSpan.textContent = !active ? 'Enabled' : 'Disabled';
                toToast('An error occurred while toggling TOTP');
            } finally {
                toggleCheckbox.disabled = false;
            }
        }
        
        // Generate new TOTP secret
        async function generateTOTP() {
            const generateBtn = document.getElementById('generatetotp');
            const qrImage = document.getElementById('totpQrCode');
            
            if (!generateBtn || !qrImage) return;
            
            generateBtn.disabled = true;
            generateBtn.textContent = 'Generating...';
            
            try {
                const response = await fetch('/user/generate-totp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Display the QR code
                    qrImage.src = result.qrCode;
                    qrImage.style.display = 'block';
                    qrImage.alt = 'TOTP QR Code - Scan with Google Authenticator';
                    
                    toToast('TOTP secret generated! Scan the QR code with Google Authenticator, then enable the toggle.', true);
                    generateBtn.textContent = 'Generate New TOTP Secret';
                    generateBtn.disabled = false;
                    
                    // Optional: Log the secret and URL for manual entry
                    console.log('TOTP Secret:', result.secret);
                    console.log('OTPAuth URL:', result.otpauthUrl);
                } else {
                    toToast('Error: ' + result.message);
                    generateBtn.disabled = false;
                    generateBtn.textContent = 'Generate new TOTP Secret';
                }
            } catch (error) {
                console.error('TOTP generation error:', error);
                toToast('An error occurred while generating TOTP secret');
                generateBtn.disabled = false;
                generateBtn.textContent = 'Generate new TOTP Secret';
            }
        }
        
        // Auto-setup verification input and load TOTP status
        document.addEventListener('DOMContentLoaded', () => {
            const verificationCodeInput = document.getElementById('verificationCode');
            
            if (verificationCodeInput) {
                // Allow Enter key to submit
                verificationCodeInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        verifyEmail();
                    }
                });
                
                // Auto-format input to only allow numbers
                verificationCodeInput.addEventListener('input', (e) => {
                    e.target.value = e.target.value.replace(/\D/g, '');
                });
            }
            
            // Load TOTP status on page load
            loadTOTPStatus();
        });
    </script>
</body>
</html>